{"version":3,"sources":["../../src/plugins/backend-sync.ts"],"names":[],"mappings":";;;AAQO,SAAS,iBAAA,CAAqB,KAAA,EAAwB,IAAA,GAAsD,EAAC,EAAG;AACnH,EAAA,MAAM,UAAA,GAAa,KAAK,UAAA,IAAc,EAAA;AACtC,EAAA,MAAM,MAAA,GAAS,KAAK,MAAA,IAAU,iBAAA;AAC9B,EAAA,IAAI,KAAA,GAAa,IAAA;AACjB,EAAA,IAAI,UAA+B,EAAC;AACpC,EAAA,IAAI,WAAA,GAAc,CAAA;AAElB,EAAA,SAAS,aAAA,GAAgB;AACrB,IAAA,IAAI,KAAA,EAAO;AACX,IAAA,KAAA,GAAQ,WAAW,MAAM;AACrB,MAAA,MAAM,QAAA,GAAW,OAAA;AAAS,MAAA,OAAA,GAAU,EAAC;AAAG,MAAA,KAAA,GAAQ,IAAA;AAAM,MAAA,WAAA,EAAA;AAEtD,MAAA,KAAA,CAAM,QAAA,CAAS,CAAC,CAAA,MAAO,EAAE,GAAG,CAAA,EAAG,WAAA,EAAa,EAAE,GAAI,CAAA,CAAE,WAAA,IAAe,EAAC,EAAI,GAAG,QAAA,EAAS,EAAE,CAAA,EAAI,KAAA,EAAO,EAAE,IAAA,EAAM,CAAA,EAAG,KAAA,CAAM,QAAA,EAAS,CAAE,IAAI,CAAA,cAAA,EAAiB,WAAW,CAAA,CAAA,CAAA,EAAK,CAAA;AAElK,MAAA,MAAM,EAAA,GAAU,MAAM,QAAA,EAAS;AAC/B,MAAA,MAAM,KAAA,GAAQ,EAAA,CAAG,SAAA,EAAW,WAAA,IAAe,EAAC;AAC5C,MAAA,MAAM,IAAA,GAAO,EAAA,CAAG,SAAA,IAAa,EAAC;AAC9B,MAAA,KAAA,MAAW,CAAA,IAAK,MAAA,CAAO,IAAA,CAAK,QAAQ,CAAA,EAAG;AACnC,QAAA,IAAI,WAAW,YAAA,IAAiB,MAAA,KAAW,YAAA,IAAgB,KAAA,CAAM,CAAC,CAAA,EAAI;AACtE,QAAA,MAAM,GAAA,GAAM,KAAK,CAAC,CAAA;AAClB,QAAA,IAAI,GAAA,EAAK,OAAA,IAAW,MAAA,CAAO,GAAA,CAAI,OAAA,CAAQ,KAAK,CAAA,KAAM,MAAA,CAAO,QAAA,CAAS,CAAC,CAAC,CAAA,EAAG;AACnE,UAAA,GAAA,CAAI,QAAQ,KAAA,GAAQ,MAAA,CAAO,QAAA,CAAS,CAAC,KAAK,EAAE,CAAA;AAAA,QAChD;AAAA,MACJ;AAAA,IACJ,GAAG,UAAU,CAAA;AAAA,EACjB;AAEA,EAAA,OAAO;AAAA,IACH,gBAAgB,KAAA,EAAqC;AACjD,MAAA,MAAA,CAAO,MAAA,CAAO,SAAS,KAAK,CAAA;AAC5B,MAAA,aAAA,EAAc;AAAA,IAClB,CAAA;AAAA,IACA,OAAA,GAAU;AAAE,MAAA,IAAI,KAAA,eAAoB,KAAK,CAAA;AAAG,MAAA,KAAA,GAAQ,IAAA;AAAM,MAAA,OAAA,GAAU,EAAC;AAAA,IAAG;AAAA,GAC5E;AACJ","file":"backend-sync.cjs","sourcesContent":["// ------------------------------------------------------------\n// src/plugins/backend-sync.ts (client-only optional plugin)\n// ------------------------------------------------------------\nimport type { FormStoreApi } from '../core/types';\nimport { parsePath } from '../core/path';\n\nexport type ResetPolicy = 'keepDirtyValues' | 'serverWins' | 'clientWins' | 'merge';\n\nexport function createBackendSync<T>(store: FormStoreApi<T>, opts: { coalesceMs?: number; policy?: ResetPolicy } = {}) {\n    const coalesceMs = opts.coalesceMs ?? 16;\n    const policy = opts.policy ?? 'keepDirtyValues';\n    let timer: any = null;\n    let pending: Record<string, any> = {};\n    let serverEpoch = 0;\n\n    function scheduleFlush() {\n        if (timer) return;\n        timer = setTimeout(() => {\n            const snapshot = pending; pending = {}; timer = null; serverEpoch++;\n            // Record to store (for DevTools/observation)\n            store.setState((s) => ({ ...s, serverState: { ...(s.serverState ?? {}), ...snapshot } }), false, { type: `${store.getState().name} server:flush(${serverEpoch})` });\n            // Conditional DOM overwrite: only not-dirty\n            const st: any = store.getState();\n            const dirty = st.formState?.dirtyFields ?? {};\n            const refs = st.__domRefs ?? {};\n            for (const p of Object.keys(snapshot)) {\n                if (policy === 'clientWins' || (policy !== 'serverWins' && dirty[p])) continue;\n                const ref = refs[p];\n                if (ref?.current && String(ref.current.value) !== String(snapshot[p])) {\n                    ref.current.value = String(snapshot[p] ?? '');\n                }\n            }\n        }, coalesceMs);\n    }\n\n    return {\n        pushServerPatch(patch: Partial<Record<string, any>>) {\n            Object.assign(pending, patch);\n            scheduleFlush();\n        },\n        dispose() { if (timer) clearTimeout(timer); timer = null; pending = {}; }\n    };\n}\n"]}