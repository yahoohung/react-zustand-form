{"version":3,"sources":["../../src/hooks/useIndexSnapshot.tsx"],"names":["createSnapshotStore","proxy","get","sub","cb","useSyncExternalStore"],"mappings":"wCAgBO,SAASA,CAAAA,CAAoBC,CAAAA,CAA2E,CAC3G,IAAMC,CAAAA,CAAM,IAAMD,CAAAA,CAAM,QAAA,EAAS,CAC3BE,CAAAA,CAAOC,CAAAA,EAAmBH,CAAAA,CAAM,SAAA,CAAUG,CAAE,CAAA,CAElD,OAAO,UAA4B,CAC/B,OAAOC,0BAAAA,CAAqBF,CAAAA,CAAKD,CAAAA,CAAKA,CAAG,CAC7C,CACJ","file":"useIndexSnapshot.js","sourcesContent":["/**\n * React hook factory to read a live snapshot from a custom store.\n *\n * Wraps `useSyncExternalStore` to provide a stable subscription to an object\n * that exposes `snapshot()` and `subscribe()` methods.\n */\nimport { useSyncExternalStore } from 'react';\n/**\n * Create a React hook bound to a snapshot-producing proxy.\n *\n * @param proxy An object with:\n *   - `snapshot`: returns the current snapshot value.\n *   - `subscribe`: registers a callback to run when the snapshot may have changed.\n * @returns A React hook (`useIndexSnapshot`) that returns the latest snapshot\n *          and re-renders when it changes.\n */\nexport function createSnapshotStore(proxy: { snapshot: () => any; subscribe: (fn: () => void) => () => void }) {\n    const get = () => proxy.snapshot();\n    const sub = (cb: () => void) => proxy.subscribe(cb);\n    // The actual React hook that components will call.\n    return function useIndexSnapshot() {\n        return useSyncExternalStore(sub, get, get);\n    };\n}"]}